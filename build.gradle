/*
 * Copyright (c) 2023 by MILOSZ GILGA <http://miloszgilga.pl>
 * Silesian University of Technology
 *
 *  File name: build.gradle.kts
 *  Last modified: 22.12.2022, 22:24
 *  Project name: ski-rental-service
 *
 * This project was written for the purpose of a subject taken in the study of Computer Science.
 * This project is not commercial in any way and does not represent a viable business model
 * of the application. Project created for educational purposes only.
 */

plugins {
    id 'java'
    id 'war'
    alias libs.plugins.dotenv.gradle
}

repositories {
    mavenCentral()
}

compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

java.sourceCompatibility = JavaVersion.VERSION_17
java.targetCompatibility = JavaVersion.VERSION_17

// NOTE: all 3rd part libraries in /gradle/libs.versions.toml file

dependencies {
    implementation          libs.jquery
    implementation          libs.popperjs
    implementation          libs.bootstrap
    implementation          libs.bootstrap.icons

    implementation          libs.slf4j
    implementation          libs.slf4j.liquibase
    implementation          libs.lombok
    implementation          libs.reflections
    implementation          libs.bcrypt
    implementation          libs.freemarker
    implementation          libs.commons.text
    implementation          libs.modelmapper
    implementation          libs.sshj
    implementation          libs.commons.codec
    implementation          libs.commons.validator
    implementation          libs.gson
    implementation          libs.barcode4j
    implementation          libs.itext

    implementation          libs.mysql.driver
    implementation          libs.hibernate.core
    implementation          libs.hibernate.validator
    implementation          libs.liquibase.core
    implementation          libs.hibernate.c3p0

    implementation          libs.jakarta.ejb
    implementation          libs.jakarta.servlet.jsp.jstl
    implementation          libs.jakarta.xml.bind.api
    implementation          libs.jaxb.runtime
    implementation          libs.jakarta.mail.api
    compileOnly             libs.jakarta.servlet.api

    annotationProcessor     libs.lombok
    testImplementation      libs.junit.api
    testRuntimeOnly         libs.junit.engine
}

tasks.register('copyRsa', Copy) {
    from layout.projectDirectory.files([ 'id_rsa', 'known_hosts.dat' ])
    into layout.buildDirectory.dir("resources/main/ssh")
}

processResources {
    filesMatching('**/hibernate.cfg.xml') {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'db_url': env.DB_URL.value,
                'db_user': env.DB_USERNAME.value,
                'db_pass': env.DB_PASSWORD.value,
        ]
    }
    filesMatching('**/mail.cfg.xml') {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'smtp_host': env.SMTP_HOST.value,
                'smtp_user': env.SMTP_USER.value,
                'smtp_pass': env.SMTP_PASS.value,
        ]
    }
    filesMatching('**/ssh.cfg.xml' ) {
        filter org.apache.tools.ant.filters.ReplaceTokens, tokens: [
                'ssh_host': env.SSH_HOST.value,
                'ssh_login': env.SSH_LOGIN.value,
        ]
    }
}

tasks.war {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
